// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Persistance;

#nullable disable

namespace Reactivities.Persistance.Migrations
{
    [DbContext(typeof(ReactivitiesDataContext))]
    [Migration("20220903125957_users")]
    partial class users
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2022, 7, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5611),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = 2,
                            Category = "culture",
                            City = "Paris",
                            Date = new DateTime(2022, 8, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5625),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            Venue = "The Louvre"
                        },
                        new
                        {
                            Id = 3,
                            Category = "music",
                            City = "London",
                            Date = new DateTime(2022, 10, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5627),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            Venue = "Wembly Stadium"
                        },
                        new
                        {
                            Id = 4,
                            Category = "food",
                            City = "London",
                            Date = new DateTime(2022, 11, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5629),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            Venue = "Jamies Italian"
                        },
                        new
                        {
                            Id = 5,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2022, 12, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5630),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = 6,
                            Category = "culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5631),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            Venue = "British Museum"
                        },
                        new
                        {
                            Id = 7,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2023, 2, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5633),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            Venue = "Punch and Judy"
                        },
                        new
                        {
                            Id = 8,
                            Category = "music",
                            City = "London",
                            Date = new DateTime(2023, 3, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5634),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = 9,
                            Category = "travel",
                            City = "Berlin",
                            Date = new DateTime(2023, 4, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5635),
                            Description = "Activity 7 months in future",
                            Title = "Future Activity 7",
                            Venue = "All"
                        },
                        new
                        {
                            Id = 10,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2023, 5, 3, 14, 59, 57, 370, DateTimeKind.Local).AddTicks(5637),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            Venue = "Pub"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9564e64a-db18-4b72-9ed6-4efb77b21c3e",
                            DisplayName = "Bob",
                            Email = "bob@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@EXAMPLE.COM",
                            NormalizedUserName = "BOB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECKmi3D8SGvyFN7T0kY1Rh1ZY6GxEssML6OZSiX6tYBTXDEgADlVHeMCaNe77Goy6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca19934e-13eb-4629-b723-ce0a41df54cb",
                            TwoFactorEnabled = false,
                            UserName = "bob@example.com"
                        },
                        new
                        {
                            Id = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1ce2db2-05e3-4204-9224-41a107624f24",
                            DisplayName = "Jane",
                            Email = "jane@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@EXAMPLE.COM",
                            NormalizedUserName = "JANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrn+vDVi91gNi/6qOm7zGooZk7zDu08QFxGD41eeVgvLd8kuxVvMCaxeBiIJPdr1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85f6b3bb-9950-4341-a60d-bd06f2e426ce",
                            TwoFactorEnabled = false,
                            UserName = "jane@example.com"
                        },
                        new
                        {
                            Id = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "228ad242-38ed-4b42-a579-76de07cd7b3c",
                            DisplayName = "Tom",
                            Email = "tom@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@EXAMPLE.COM",
                            NormalizedUserName = "TOM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfMpWSPDOfLlGdZKJbJe9ViMtK0pJbEJgsaUaDNCOeQPv7L0uhdKWHwf03v7yx2EA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f408e76a-6c88-4097-b10f-8c9c4364c806",
                            TwoFactorEnabled = false,
                            UserName = "tom@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Persistance;

#nullable disable

namespace Reactivities.Persistance.Migrations
{
    [DbContext(typeof(ReactivitiesDataContext))]
    [Migration("20220904142621_attendance")]
    partial class attendance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2022, 7, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7043),
                            Description = "Activity 2 months ago",
                            IsCancelled = false,
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = 2,
                            Category = "culture",
                            City = "Paris",
                            Date = new DateTime(2022, 8, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7061),
                            Description = "Activity 1 month ago",
                            IsCancelled = false,
                            Title = "Past Activity 2",
                            Venue = "The Louvre"
                        },
                        new
                        {
                            Id = 3,
                            Category = "music",
                            City = "London",
                            Date = new DateTime(2022, 10, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7065),
                            Description = "Activity 1 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 1",
                            Venue = "Wembly Stadium"
                        },
                        new
                        {
                            Id = 4,
                            Category = "food",
                            City = "London",
                            Date = new DateTime(2022, 11, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7067),
                            Description = "Activity 2 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 2",
                            Venue = "Jamies Italian"
                        },
                        new
                        {
                            Id = 5,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2022, 12, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7069),
                            Description = "Activity 3 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 3",
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = 6,
                            Category = "culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7072),
                            Description = "Activity 4 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 4",
                            Venue = "British Museum"
                        },
                        new
                        {
                            Id = 7,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2023, 2, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7074),
                            Description = "Activity 5 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 5",
                            Venue = "Punch and Judy"
                        },
                        new
                        {
                            Id = 8,
                            Category = "music",
                            City = "London",
                            Date = new DateTime(2023, 3, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7168),
                            Description = "Activity 6 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 6",
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = 9,
                            Category = "travel",
                            City = "Berlin",
                            Date = new DateTime(2023, 4, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7172),
                            Description = "Activity 7 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 7",
                            Venue = "All"
                        },
                        new
                        {
                            Id = 10,
                            Category = "drinks",
                            City = "London",
                            Date = new DateTime(2023, 5, 4, 16, 26, 21, 8, DateTimeKind.Local).AddTicks(7174),
                            Description = "Activity 8 months in future",
                            IsCancelled = false,
                            Title = "Future Activity 8",
                            Venue = "Pub"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.ActivityAttendee", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("ActivityAttendees");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 2,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 2,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 3,
                            AppUserId = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 3,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 4,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 4,
                            AppUserId = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 5,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 5,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 6,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 7,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 7,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 8,
                            AppUserId = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 8,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 9,
                            AppUserId = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 9,
                            AppUserId = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = 10,
                            AppUserId = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = 10,
                            AppUserId = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            IsHost = false
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7D891E0A-E166-45E7-9F15-AE1F683EA43A",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76294e93-3517-4666-92a3-caeff0c26bf1",
                            DisplayName = "Bob",
                            Email = "bob@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@EXAMPLE.COM",
                            NormalizedUserName = "BOB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECPm4ggSBpQZkVsha98HIa3rD6zEGcygA7xFwpq9X16hECU+ZrtBodtDpO9Crf9ItA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fbb37f5-9182-45d0-aaba-c5d9e6a80bfc",
                            TwoFactorEnabled = false,
                            UserName = "bob@example.com"
                        },
                        new
                        {
                            Id = "72CC07A3-65A5-47DD-82A3-06F313FC12A7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0358f5c2-6013-4e54-93f7-cde105467812",
                            DisplayName = "Jane",
                            Email = "jane@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@EXAMPLE.COM",
                            NormalizedUserName = "JANE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlXpOe6TbUsC+Vnb9sxJS7RKtEACa5IdCqFG0wc8fOUdGZxghPNebkhYFH4UcfNiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c32f0cdb-6582-477a-bc1b-e13036ea3039",
                            TwoFactorEnabled = false,
                            UserName = "jane@example.com"
                        },
                        new
                        {
                            Id = "B61171D5-4848-4F3F-B425-EDECCB408C9B",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd6e0a94-14c2-4ebb-b0a2-6b498f09b9bc",
                            DisplayName = "Tom",
                            Email = "tom@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@EXAMPLE.COM",
                            NormalizedUserName = "TOM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP/KGoHpObfhyg9Jpxi2FQy5R0EOaFBcMfMeYXoHAInSDfljzd5bqUU3DHOdVC6Lzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6177be8-9785-43d4-8ecc-ff23e348f7f2",
                            TwoFactorEnabled = false,
                            UserName = "tom@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reactivities.Domain.ActivityAttendee", b =>
                {
                    b.HasOne("Reactivities.Domain.Activity", "Activity")
                        .WithMany("Attendees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Reactivities.Domain.Activity", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("Reactivities.Domain.AppUser", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
